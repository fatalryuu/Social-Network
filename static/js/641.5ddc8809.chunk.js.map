{"version":3,"file":"static/js/641.5ddc8809.chunk.js","mappings":"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","sources":["webpack://react-kabzda-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.jsx","components/Profile/ProfileInfo/ContactForm/ContactForm.jsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.jsx","components/Profile/ProfileInfo/Contact/Contact.jsx","components/Profile/ProfileInfo/ProfileData/ProfileData.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","redux/profileReducer.ts","webpack://react-kabzda-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-kabzda-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile_info\":\"ProfileInfo_profile_info__H3D-z\",\"avatar\":\"ProfileInfo_avatar__OJq4I\",\"info\":\"ProfileInfo_info__blXPI\",\"name\":\"ProfileInfo_name__adacu\",\"about\":\"ProfileInfo_about__pyyvZ\",\"job\":\"ProfileInfo_job__S9tI2\"};","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatus = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        props.isOwner ? setEditMode(true) : null;\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode ? (\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{!props.status ? \"No status\" : props.status}</span>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} value={status.toString()} onBlur={deactivateEditMode}/>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\n\r\nconst ContactForm = ({contactTitle, contactValue, register}) => {\r\n    return (\r\n        <div>\r\n            <b>{contactTitle}: </b>\r\n            <input type=\"text\" defaultValue={contactValue} {...register(\"contacts.\" + contactTitle, {required: false})}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContactForm;","import React from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport s from \"../ProfileInfo.module.css\";\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\n\r\nconst ProfileDataForm = ({profile, setEditMode, saveProfileInfo}) => {\r\n    const {register, handleSubmit} = useForm();\r\n    const onSubmit = (d) => {\r\n        d[\"fullName\"] = profile.fullName;\r\n        saveProfileInfo(d)\r\n            .then(() => setEditMode(false));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className={s.about}>\r\n                    <b>About me: </b>\r\n                    <input type=\"text\" {...register(\"aboutMe\", {required: false})}\r\n                           defaultValue={profile.aboutMe}\r\n                           onBlur={() => {\r\n                           }} placeholder={'About Me'}/>\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job: </b>\r\n                    <input type=\"checkbox\" defaultChecked={profile.lookingForAJob} {...register(\"lookingForAJob\", {required: false})}/>\r\n                </div>\r\n                <div className={s.job}>\r\n                    <b>Soft skills: </b>\r\n                    <input type=\"text\" {...register(\"lookingForAJobDescription\", {required: false})}\r\n                           defaultValue={profile.lookingForAJobDescription}\r\n                           onBlur={() => {\r\n                           }} placeholder={'Soft skills'}/>\r\n                </div>\r\n                {Object.keys(profile.contacts).map(key => <ContactForm register={register} key={key} contactTitle={key}\r\n                                                                   contactValue={profile.contacts[key]}/>)}\r\n                <button>Done</button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileDataForm;","import React from 'react';\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>\r\n            {contactValue ? <div>\r\n                <b>{contactTitle}: </b>\r\n                <a href={contactValue}>{contactValue}</a>\r\n            </div> : null}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Contact;","import React from 'react';\r\nimport s from \"../ProfileInfo.module.css\";\r\nimport Contact from \"../Contact/Contact\";\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <>\r\n        {isOwner ? <button onClick={goToEditMode}>edit</button> : null}\r\n        {profile.aboutMe ? <div>\r\n            <b>About me: </b>\r\n            <span className={s.about}>{profile.aboutMe}</span>\r\n        </div> : null}\r\n        <div>\r\n            <b>Looking for a job: </b>\r\n            {profile.lookingForAJob ? 'Yes' : 'No'}\r\n        </div>\r\n        {profile.lookingForAJob ?\r\n            <div className={s.job}>\r\n                <b>Soft skills: </b>\r\n                {profile.lookingForAJob ? profile.lookingForAJobDescription : null}\r\n            </div> : null}\r\n        {Object.keys(profile.contacts).map(key => <Contact key={key} contactTitle={key}\r\n                                                           contactValue={profile.contacts[key]}/>)}\r\n    </>\r\n}\r\n\r\nexport default ProfileData;","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport avatar from '../../../img/user_avatar.jpg'\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfileInfo}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onAvatarSelected = (e) => {\r\n        if (e.target.files.length)\r\n            savePhoto(e.target.files[0]);\r\n    }\r\n\r\n    return (\r\n        <div className={s.profile_info}>\r\n            <div className={s.avatar}>\r\n                <img src={profile.photos.large != null ? profile.photos.large : avatar} alt=\"\"/>\r\n                <div>\r\n                    {isOwner ? <input type=\"file\" onChange={onAvatarSelected}/> : null}\r\n                </div>\r\n            </div>\r\n            <div className={s.info}>\r\n                <div className={s.name}>{profile.fullName}</div>\r\n                <ProfileStatus status={status} updateStatus={updateStatus} isOwner={isOwner}/>\r\n                {editMode ? <ProfileDataForm profile={profile} setEditMode={setEditMode} saveProfileInfo={saveProfileInfo}/> :\r\n                    <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import {profileAPI} from \"../api/api\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\n\r\nconst ADD_POST = 'profile/ADD_POST';\r\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE';\r\nconst SET_STATUS = 'profile/SET_STATUS';\r\nconst DELETE_POST = 'profile/DELETE_POST';\r\nconst SAVE_PHOTO_SUCCESS = 'profile/SAVE_PHOTO_SUCCESS';\r\nconst SAVE_PROFILE_INFO_SUCCESS = 'profile/SAVE_PROFILE_INFO_SUCCESS';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 15},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 12}\r\n    ] as Array<PostType>,\r\n    profile: null as null | ProfileType,\r\n    status: \"\"\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: state.posts.length + 1, message: action.newPostText, likesCount: 0}],\r\n            };\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postID)\r\n            }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        case SAVE_PROFILE_INFO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    aboutMe: action.profileInfo.aboutMe,\r\n                    lookingForAJob: action.profileInfo.lookingForAJob,\r\n                    lookingForAJobDescription: action.profileInfo.lookingForAJobDescription\r\n                } as ProfileType\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype AddPostActionType = {\r\n    type: typeof ADD_POST,\r\n    newPostText: string\r\n}\r\n\r\nexport const addPost = (newPostText: string): AddPostActionType => ({type: ADD_POST, newPostText});\r\n\r\ntype SetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE,\r\n    profile: ProfileType\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => ({type: SET_USER_PROFILE, profile});\r\n\r\ntype SetStatusActionType = {\r\n    type: typeof SET_STATUS,\r\n    status: string\r\n}\r\n\r\nexport const setStatus = (status: string): SetStatusActionType => ({type: SET_STATUS, status});\r\n\r\ntype DeletePostActionType = {\r\n    type: typeof DELETE_POST,\r\n    postID: number\r\n}\r\n\r\nexport const deletePost = (postID: number): DeletePostActionType => ({type: DELETE_POST, postID});\r\n\r\ntype SavePhotoSuccessActionType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS,\r\n    photos: PhotosType\r\n}\r\n\r\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessActionType => ({type: SAVE_PHOTO_SUCCESS, photos});\r\n\r\ntype SaveProfileInfoSuccessActionType = {\r\n    type: typeof SAVE_PROFILE_INFO_SUCCESS,\r\n    profileInfo: ProfileType\r\n}\r\n\r\nexport const saveProfileInfoSuccess = (profileInfo: ProfileType): SaveProfileInfoSuccessActionType => ({type: SAVE_PROFILE_INFO_SUCCESS, profileInfo});\r\n\r\nexport const getProfile = (userID: number) => async (dispatch: any) => {\r\n    let data = await profileAPI.getProfile(userID);\r\n    dispatch(setUserProfile(data));\r\n}\r\nexport const getStatus = (userID: number) => async (dispatch: any) => {\r\n    let data = await profileAPI.getStatus(userID);\r\n    dispatch(setStatus(data));\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: any) => {\r\n    let data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0)\r\n        dispatch(setStatus(status));\r\n}\r\nexport const savePhoto = (photo: any) => async (dispatch: any) => {\r\n    let data = await profileAPI.savePhoto(photo);\r\n    if (data.resultCode === 0)\r\n        dispatch(savePhotoSuccess(data.data.photos));\r\n}\r\nexport const saveProfileInfo = (info: ProfileType) => async (dispatch: any, getState: any) => {\r\n    const userID = getState().auth.userID;\r\n    const data = await profileAPI.saveProfileData(info);\r\n    if (data.resultCode === 0)\r\n        dispatch(getProfile(userID));\r\n}\r\nexport default profileReducer","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"MyPosts_text__-+Ipi\",\"newPost\":\"MyPosts_newPost__B4LFh\",\"postsBlock\":\"MyPosts_postsBlock__2WPjJ\",\"posts\":\"MyPosts_posts__ct9Vp\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__qURPC\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport avatar from '../../../../img/post_avatar.png'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src={avatar} alt=\"\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span>like count: {props.likes}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {useForm} from \"react-hook-form\";\r\n\r\nconst MyPosts = ({posts, addPost}) => {\r\n    const {register, handleSubmit, reset} = useForm();\r\n    let postsElements = posts.map(p => <Post message={p.message} likes={p.likesCount} key={p.id}/>)\r\n\r\n    const onSubmit = (d) => {\r\n        addPost(d.post);\r\n        reset();\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3 className={s.text}>My posts</h3>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className={s.newPost}>\r\n                    <div>\r\n                        <textarea {...register(\"post\", {required: true})}></textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button>Add post</button>\r\n                    </div>\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPost} from \"../../../redux/profileReducer.ts\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {dispatch(addPost(newPostText))}\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus} savePhoto={props.savePhoto}\r\n                         saveProfileInfo={props.saveProfileInfo}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, savePhoto, saveProfileInfo, updateStatus} from \"../../redux/profileReducer.ts\";\r\nimport withAuthRedirect from \"../HOC/withAuthRedirect\";\r\nimport {compose} from \"@reduxjs/toolkit\";\r\nimport withRouter from \"../../utils/withRouter\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshProfile() {\r\n        let userID = this.props.match.params.userID;\r\n        if (!userID)\r\n            userID = 27510;  //27094\r\n        this.props.getProfile(userID);\r\n        this.props.getStatus(userID);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userID !== prevProps.match.params.userID)\r\n            this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}\r\n                        isOwner={!this.props.match.params.userID}\r\n                        savePhoto={this.props.savePhoto}\r\n                        saveProfileInfo={this.props.saveProfileInfo}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfileInfo}),\r\n    withRouter,\r\n    withAuthRedirect)(ProfileContainer);"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","toString","onBlur","updateStatus","onDoubleClick","isOwner","contactTitle","contactValue","register","type","defaultValue","required","profile","saveProfileInfo","useForm","handleSubmit","onSubmit","d","fullName","then","className","s","aboutMe","placeholder","defaultChecked","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","key","href","goToEditMode","onClick","savePhoto","Preloader","src","photos","large","avatar","alt","target","files","length","ADD_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","getProfile","userID","dispatch","profileAPI","data","message","likes","posts","addPost","reset","postsElements","p","likesCount","id","post","connect","state","profilePage","newPostText","MyPosts","ProfileContainer","this","match","params","getStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","resultCode","photo","info","getState","auth","withRouter","withAuthRedirect"],"sourceRoot":""}